# Filter tych które potrzebujemy do JOINa (totale)
df <- df %>% filter(str_length(as.character(store_number)) == 10) %>%
mutate(store_id = as.numeric(substr(as.character(store_number),8, 10)))
# Join with stores
df2 <- left_join(stores, df, by = c("Store ID", "store_id"), keep = TRUE)
# Join with stores
df2 <- left_join(stores, df, by = c("Store ID", store_id), keep = TRUE)
typeof(stores$`Store ID`)
typeof(df$store_id)
# Join with stores
df2 <- left_join(stores, df, by = c("Store ID", store_id))
# Join with stores
df2 <- left_join(stores, df, by = c("Store ID" = "store_id"))
View(df2)
# Join with stores
# Left join to Stores - all stores will be present at this stage! (i.e. later join Daffodil data so we need them)
df2 <- left_join(stores, df[-1], by = c("Store ID" = "store_id"))
View(df2)
# Join with stores
# Left join to Stores - all stores will be present at this stage! (i.e. later join Daffodil data so we need them)
df2 <- left_join(stores, df[-`STORE NAME`], by = c("Store ID" = "store_id"))
# Join with stores
# Left join to Stores - all stores will be present at this stage! (i.e. later join Daffodil data so we need them)
df2 <- left_join(stores, df[-STORE.NAME], by = c("Store ID" = "store_id"))
# Join with stores
# Left join to Stores - all stores will be present at this stage! (i.e. later join Daffodil data so we need them)
df2 <- left_join(stores, df[-"STORE.NAME"], by = c("Store ID" = "store_id"))
# Join with stores
# Left join to Stores - all stores will be present at this stage! (i.e. later join Daffodil data so we need them)
df2 <- left_join(stores, df[,-which(names(df) == "STORE.NAME"], by = c("Store ID" = "store_id"))
# Join with stores
# Left join to Stores - all stores will be present at this stage! (i.e. later join Daffodil data so we need them)
df2 <- left_join(stores, df[,-which(names(df) == "STORE.NAME")], by = c("Store ID" = "store_id"))
# lista plików Summary
temp = list.files(pattern="Summary*.csv")
# lista plików Summary
temp = list.files(pattern="Summary**.csv")
month_year <- stringr::str_match(temp[1], "Sales\\s*(.*?)\\s*.csv")[,2]
month_year <- stringr::str_match(temp[1], "Sales\\s*(.*?)\\s*.csv")
View(month_year)
# lista plików Summary
temp = list.files(pattern="*.csv")
month_year <- stringr::str_match(temp[1], "Sales\\s*(.*?)\\s*.csv")
print(getwd())
s <- "/Users/pawel/OneDrive/Dokumenty/KozminskiBDS/Sales/R_Intro/ParvifloraProject/"
month_year <- stringr::str_match(s, "Sales\\s*(.*?)\\s*.csv")[,2]
list.files(pattern="*.csv")
s <- "/Users/pawel/OneDrive/Dokumenty/KozminskiBDS/Sales/R_Intro/ParvifloraProject/Summary of Sales March 2020.csv"
month_year <- stringr::str_match(s, "Sales\\s*(.*?)\\s*.csv")[,2]
month_year <- stringr::str_match(s, "Summary\\s*(.*?)\\s*.csv")[,2]
typof(temp)
typeof(temp)
typeof(temp)[1]
as.array(temp)
typeof(as.array(temp))
for (f in temp){
print(f)
}
#wczytaj df
file <- temp[1]
df_test <- read_csv2(file)
View(df_test)
df_test <- as.table(read_csv2(file))
View(df_test)
df_test <- read_delim(file, delim = ",")
View(df_test)
# transform data.frame
add_month_year <- function(file_name, df){
month_year <- stringr::str_match(file_name, "Sales\\s*(.*?)\\s*.csv")[,2]
month_year <- strsplit(month_year, split=' ')[[1]]
mnth <- match(month_year[1], month.name)
yr <- as.numeric(month_year[2])
df <- df %>% mutate(month_id = mnth, year_id = yr)
return(df)
}
# lista plików Summary
temp = list.files(pattern="*.csv")
l <- list()
for (file in temp){
#wczytaj df
df_test <- read_delim(file, delim = ",")
paste("wczytano plik", file)
df_test <- add_month_year(file, df_test)
append(file, df_test)
}
View(l)
View(df_test)
df_base <- data.frame()
for (file in temp){
#wczytaj df
df_test <- read_delim(file, delim = ",")
paste("wczytano plik", file)
df_test <- add_month_year(file, df_test)
append(l, df_test)
}
View(l)
l <- c()
for (file in temp){
#wczytaj df
df_test <- read_delim(file, delim = ",")
paste("wczytano plik", file)
df_test <- add_month_year(file, df_test)
append(l, df_test)
}
for (file in temp){
#wczytaj df
df_test <- read_delim(file, delim = ",")
paste("wczytano plik", file)
df_test <- add_month_year(file, df_test)
union(df_test, df_base)
}
df_base <- df %>% filter(store_number == 'xxx')
View(df)
# transform data.frame
add_month_year <- function(file_name, df){
month_year <- stringr::str_match(file_name, "Sales\\s*(.*?)\\s*.csv")[,2]
month_year <- strsplit(month_year, split=' ')[[1]]
mnth <- match(month_year[1], month.name)
yr <- as.numeric(month_year[2])
df <- df %>% mutate(month_id = mnth, year_id = yr)
# tymczasowo
df <- df %>% rename('store_number' = "STORE #")
# Data.frame z GROSS / RETAIL / OTHER
# + do oflagowania: Swiebodzin i Parviflora
df_scam <- df %>% filter(!str_length(as.character(store_number)) == 10)
# Filter tych które potrzebujemy do JOINa (totale)
df <- df %>% filter(str_length(as.character(store_number)) == 10) %>%
mutate(store_id = as.numeric(substr(as.character(store_number),8, 10)))
return(df)
}
for (file in temp){
#wczytaj df
df_test <- read_delim(file, delim = ",")
paste("wczytano plik", file)
df_test <- add_month_year(file, df_test)
union(df_test, df_base)
}
df_base <- df %>% filter(store_number == 'xxx')
View(df_test)
list.files(pattern="*.csv")
# lista plików Summary
temp = list.files(pattern="*.csv")
# lista plików Summary
temp = list.files(pattern="*.csv")
sales_dflist <- list()
i <- 1
for (file in temp){
#wczytaj df
df_test <- read_delim(file, delim = ",")
print(paste("wczytano plik", file))
df_test <- add_month_year(file, df_test)
sales_dflist[i] <- df_test
i <- i + 1
}
View(sales_dflist)
i <- 1
sales_dflist <- list()
for (file in temp){
#wczytaj df
df_test <- read_delim(file, delim = ",")
print(paste("wczytano plik", file))
df_test <- add_month_year(file, df_test)
sales_dflist[[i]] <- df_test
i <- i + 1
}
View(stores)
View(sales_dflist)
df_sales <- dplyr::bind_rows(sales_dflist)
View(df_sales)
sales_dflist <- list()
i <- 1
for (file in temp){
#wczytaj df
df_test <- read_delim(file, delim = ",")
print(paste("wczytano plik", file))
print(names(df_test))
df_test <- add_month_year(file, df_test)
sales_dflist[[i]] <- df_test
i <- i + 1
}
# expected columns order and names
# for now used in the read step
# may change to use it in assert(columns == columns_in_file), after some pattern matching
columns <- c("store_name", "store_number", "count_Azalea", "rev_Azalea",
"count_Begonia", "rev_Begonia", "count_Carnation", "rev_Carnation",
"count_Daffodil", "rev_Daffodil", "count_total", "rev_total")
i <- 1
for (file in temp){
#wczytaj df
df_test <- read_delim(file, delim = ",", col_names = columns)
print(paste("wczytano plik", file))
df_test <- add_month_year(file, df_test)
sales_dflist[[i]] <- df_test
i <- i + 1
}
# transform data.frame
add_month_year <- function(file_name, df){
month_year <- stringr::str_match(file_name, "Sales\\s*(.*?)\\s*.csv")[,2]
month_year <- strsplit(month_year, split=' ')[[1]]
mnth <- match(month_year[1], month.name)
yr <- as.numeric(month_year[2])
df <- df %>% mutate(month_id = mnth, year_id = yr)
# tymczasowo
#df <- df %>% rename('store_number' = "STORE #")
# Data.frame z GROSS / RETAIL / OTHER
# + do oflagowania: Swiebodzin i Parviflora
df_scam <- df %>% filter(!str_length(as.character(store_number)) == 10)
# Filter tych które potrzebujemy do JOINa (totale)
df <- df %>% filter(str_length(as.character(store_number)) == 10) %>%
mutate(store_id = as.numeric(substr(as.character(store_number),8, 10)))
return(df)
}
i <- 1
for (file in temp){
#wczytaj df
df_test <- read_delim(file, delim = ",", col_names = columns)
print(paste("wczytano plik", file))
df_test <- add_month_year(file, df_test)
sales_dflist[[i]] <- df_test
i <- i + 1
}
df_sales <- dplyr::bind_rows(sales_dflist)
select(df_sales, -"store_name")
select(df_sales, "store_name")
# Join with stores
# Left join to Stores - all stores will be present at this stage! (i.e. later join Daffodil data so we need them)
df2 <- stores %>% left_join(select(df_sales, -"store_name"), by = c("Store ID" = "store_id"))
View(df2)
View(Summary.of.Sales.January.2020)
View(Summary.of.Sales.January.2020)
View(Summary.of.Sales.February.2020)
View(Summary.of.Sales.March.2020)
# transform data.frame
add_month_year <- function(file_name, df){
month_year <- stringr::str_match(file_name, "Sales\\s*(.*?)\\s*.csv")[,2]
month_year <- strsplit(month_year, split=' ')[[1]]
mnth <- match(month_year[1], month.name)
yr <- as.numeric(month_year[2])
df <- df %>% mutate(month_id = mnth, year_id = yr)
# tymczasowo
#df <- df %>% rename('store_number' = "STORE #")
# Data.frame z GROSS / RETAIL / OTHER
# + do oflagowania: Swiebodzin i Parviflora
df_scam <- df %>% filter(!str_length(as.character(store_number)) == 10)
# Filter tych które potrzebujemy do JOINa (totale)
df <- df %>% filter(str_length(as.character(store_number)) == 10) %>%
mutate(store_id = as.numeric(substr(as.character(store_number),8, 10)))
return(df, df_scam)
}
# initialize lists of data.frames and a pointer
sales_dflist <- list()
discarded_dflist<- list() # this one has GROSS / RETAIL / OTHER data which we are not interested in now
i <- 1
for (file in temp){
# read data.frame with monthly data
df_mth <- read_delim(file, delim = ",", col_names = columns)
print(paste("wczytano plik", file))
# Add information about month year and extracted store ID (this is necessary for later join)
df_mth, df_trash <- add_month_year(file, df_test)
# append this data.frame as element of the list which will be binded later
sales_dflist[[i]] <- df_mth
discarded_dflist[[i]] <- df_trash
# ammend the pointer
i <- i + 1
}
# transform data.frame
add_month_year <- function(file_name, df){
month_year <- stringr::str_match(file_name, "Sales\\s*(.*?)\\s*.csv")[,2]
month_year <- strsplit(month_year, split=' ')[[1]]
mnth <- match(month_year[1], month.name)
yr <- as.numeric(month_year[2])
df <- df %>% mutate(month_id = mnth, year_id = yr)
# tymczasowo
#df <- df %>% rename('store_number' = "STORE #")
# Data.frame z GROSS / RETAIL / OTHER
# maybe we will use it later
df_scam <- df %>% filter(!str_length(as.character(store_number)) == 10)
# Filter tych które potrzebujemy do JOINa (totale)
df <- df %>% filter(str_length(as.character(store_number)) == 10) %>%
mutate(store_id = as.numeric(substr(as.character(store_number),8, 10)))
# Unfortunately R doesn't support returning multiple objects - workaround is list
ls_df = list("totals" = df, "rest" = df_scam)
return(ls_df)
}
# initialize lists of data.frames and a pointer
sales_dflist <- list()
discarded_dflist<- list() # this one has GROSS / RETAIL / OTHER data which we are not interested in now
i <- 1
for (file in temp){
# read data.frame with monthly data
df_mth <- read_delim(file, delim = ",", col_names = columns)
print(paste("wczytano plik", file))
# Add information about month year and extracted store ID (this is necessary for later join)
ls_trans_df <- add_month_year(file, df_test)
# append this data.frame as element of the list which will be binded later
sales_dflist[[i]] <- ls_trans_df$totals
discarded_dflist[[i]] <- ls_trans_df$rest
# increase the pointer
i <- i + 1
}
# make a UNION - bind list of data.frames together
df_sales <- dplyr::bind_rows(sales_dflist)
df_rest <- dplyr::bind_rows(discarded_dflist)
View(df_rest)
View(discarded_dflist)
# lista plików Summary
temp = list.files(pattern="Summary*.csv")
list.files(pattern="Summary*.csv")
# lista plików Summary
temp = list.files(pattern="Summary*\\.csv$")
list.files(pattern="Summary*\\.csv$")
list.files(pattern="^Summary\\.csv$")
list.files(pattern="^S\\.csv$")
list.files(pattern="^Summary.*csv$")
df_test <- read_delim("Summary of Sales January 2020.csv", delim = ",", col_names = columns)
df_test %>% filter(!str_length(as.character(store_number)) == 10)
nrow(df_test)
# transform data.frame
add_month_year <- function(file_name, df){
month_year <- stringr::str_match(file_name, "Sales\\s*(.*?)\\s*.csv")[,2]
month_year <- strsplit(month_year, split=' ')[[1]]
mnth <- match(month_year[1], month.name)
yr <- as.numeric(month_year[2])
df <- df %>% mutate(month_id = mnth, year_id = yr)
# tymczasowo
#df <- df %>% rename('store_number' = "STORE #")
# Data.frame z GROSS / RETAIL / OTHER
# maybe we will use it later
df_scam <- df %>% filter(!str_length(as.character(store_number)) == 10)
print(nrow(df_scam))
# Filter tych które potrzebujemy do JOINa (totale)
df <- df %>% filter(str_length(as.character(store_number)) == 10) %>%
mutate(store_id = as.numeric(substr(as.character(store_number),8, 10)))
# Unfortunately R doesn't support returning multiple objects - workaround is list
ls_df = list("totals" = df, "rest" = df_scam)
return(ls_df)
}
# initialize lists of data.frames and a pointer
sales_dflist <- list()
discarded_dflist<- list() # this one has GROSS / RETAIL / OTHER data which we are not interested in now
i <- 1
for (file in files_list){
# initialize lists of data.frames and a pointer
sales_dflist <- list()
discarded_dflist<- list() # this one has GROSS / RETAIL / OTHER data which we are not interested in now
i <- 1
for (file in files_list){
# read data.frame with monthly data
df_mth <- read_delim(file, delim = ",", col_names = columns)
print(paste("wczytano plik", file))
# Add information about month year and extracted store ID (this is necessary for later join)
ls_trans_df <- add_month_year(file, df_test)
# append this data.frame as element of the list which will be binded later
sales_dflist[[i]] <- ls_trans_df$totals
discarded_dflist[[i]] <- ls_trans_df$rest
# increase the pointer
i <- i + 1
}
# lista plików Summary
files_list = list.files(pattern="^Summary.*csv$")
# initialize lists of data.frames and a pointer
sales_dflist <- list()
discarded_dflist<- list() # this one has GROSS / RETAIL / OTHER data which we are not interested in now
i <- 1
for (file in files_list){
# read data.frame with monthly data
df_mth <- read_delim(file, delim = ",", col_names = columns)
print(paste("wczytano plik", file))
# Add information about month year and extracted store ID (this is necessary for later join)
ls_trans_df <- add_month_year(file, df_test)
# append this data.frame as element of the list which will be binded later
sales_dflist[[i]] <- ls_trans_df$totals
discarded_dflist[[i]] <- ls_trans_df$rest
# increase the pointer
i <- i + 1
}
list.files(pattern="^Summary.*csv$")
list.files(pattern="^Summary.*csv$")
# lista plików Summary
files_list = list.files(pattern="^Summary.*csv$")
# lista plików Summary
files_list = list.files(pattern="*csv$")
list.files(pattern="*csv$")
list.files(pattern="*.csv$")
# lista plików Summary
files_list = list.files(pattern="*.csv")
list.files(pattern="*.csv")
for (file in files_list){
# read data.frame with monthly data
df_mth <- read_delim(file, delim = ",", col_names = columns)
print(paste("wczytano plik", file))
# Add information about month year and extracted store ID (this is necessary for later join)
ls_trans_df <- add_month_year(file, df_test)
# append this data.frame as element of the list which will be binded later
sales_dflist[[i]] <- ls_trans_df$totals
discarded_dflist[[i]] <- ls_trans_df$rest
# increase the pointer
i <- i + 1
}
stores <- readxl::read_excel("Stores.xlsx")
print("das")
list.files(pattern="^Summary.*csv$")
files_list <- list.files(pattern="^Summary.*csv$")
for (file in files_list){
# read data.frame with monthly data
df_mth <- read_delim(file, delim = ",", col_names = columns)
print(paste("wczytano plik", file))
# Add information about month year and extracted store ID (this is necessary for later join)
ls_trans_df <- add_month_year(file, df_test)
# append this data.frame as element of the list which will be binded later
sales_dflist[[i]] <- ls_trans_df$totals
discarded_dflist[[i]] <- ls_trans_df$rest
# increase the pointer
i <- i + 1
}
# make a UNION - bind list of data.frames together
df_sales <- dplyr::bind_rows(sales_dflist)
# make a UNION - bind list of data.frames together
df_sales <- dplyr::bind_rows(sales_dflist)
stores <- readxl::read_excel("Stores.xlsx")
# lista plików Summary
files_list <- list.files(pattern="^Summary.*csv$")
# expected columns order and names
# for now used in the read step
# may change to use it in assert(columns == columns_in_file), after some pattern matching
columns <- c("store_name", "store_number", "count_Azalea", "rev_Azalea",
"count_Begonia", "rev_Begonia", "count_Carnation", "rev_Carnation",
"count_Daffodil", "rev_Daffodil", "count_total", "rev_total")
# initialize lists of data.frames and a pointer
sales_dflist <- list()
discarded_dflist<- list() # this one has GROSS / RETAIL / OTHER data which we are not interested in now
i <- 1
# transform data.frame
add_month_year <- function(file_name, df){
month_year <- stringr::str_match(file_name, "Sales\\s*(.*?)\\s*.csv")[,2]
month_year <- strsplit(month_year, split=' ')[[1]]
mnth <- match(month_year[1], month.name)
yr <- as.numeric(month_year[2])
df <- df %>% mutate(month_id = mnth, year_id = yr)
# tymczasowo
#df <- df %>% rename('store_number' = "STORE #")
# Data.frame z GROSS / RETAIL / OTHER
# maybe we will use it later
df_scam <- df %>% filter(!str_length(as.character(store_number)) == 10)
print(nrow(df_scam))
# Filter tych które potrzebujemy do JOINa (totale)
df <- df %>% filter(str_length(as.character(store_number)) == 10) %>%
mutate(store_id = as.numeric(substr(as.character(store_number),8, 10)))
# Unfortunately R doesn't support returning multiple objects - workaround is list
ls_df = list("totals" = df, "rest" = df_scam)
return(ls_df)
}
for (file in files_list){
# read data.frame with monthly data
df_mth <- read_delim(file, delim = ",", col_names = columns)
print(paste("wczytano plik", file))
# Add information about month year and extracted store ID (this is necessary for later join)
ls_trans_df <- add_month_year(file, df_test)
# append this data.frame as element of the list which will be binded later
sales_dflist[[i]] <- ls_trans_df$totals
discarded_dflist[[i]] <- ls_trans_df$rest
# increase the pointer
i <- i + 1
}
library(tidyverse)
library(readxl)
library("xlsx")
for (file in files_list){
# read data.frame with monthly data
df_mth <- read_delim(file, delim = ",", col_names = columns)
print(paste("wczytano plik", file))
# Add information about month year and extracted store ID (this is necessary for later join)
ls_trans_df <- add_month_year(file, df_test)
# append this data.frame as element of the list which will be binded later
sales_dflist[[i]] <- ls_trans_df$totals
discarded_dflist[[i]] <- ls_trans_df$rest
# increase the pointer
i <- i + 1
}
# initialize lists of data.frames and a pointer
sales_dflist <- list()
discarded_dflist<- list() # this one has GROSS / RETAIL / OTHER data which we are not interested in now
i <- 1
for (file in files_list){
# read data.frame with monthly data
df_mth <- read_delim(file, delim = ",", col_names = columns)
print(paste("wczytano plik", file))
# Add information about month year and extracted store ID (this is necessary for later join)
ls_trans_df <- add_month_year(file, df_mth)
# append this data.frame as element of the list which will be binded later
sales_dflist[[i]] <- ls_trans_df$totals
discarded_dflist[[i]] <- ls_trans_df$rest
# increase the pointer
i <- i + 1
}
View(discarded_dflist)
View(sales_dflist)
# make a UNION - bind list of data.frames together
df_sales <- dplyr::bind_rows(sales_dflist)
df_rest <- dplyr::bind_rows(discarded_dflist)
# Join with stores
# Left join to Stores - all stores will be present at this stage! (i.e. later join Daffodil data so we need them)
df_stores_sales <- stores %>% left_join(select(df_sales, -"store_name"),
by = c("Store ID" = "store_id"))
### Read in STORES ####
stores <- readxl::read_excel("Stores.xlsx")
# Left join to Stores - all stores will be present at this stage!
# Even those with all NULLs are present - meaning no sales of other flowers in these stores
# (i.e. later join Daffodil data so we NEED them)
df_stores_sales <- stores %>% left_join(select(df_sales, -"store_name"),
by = c("Store ID" = "store_id"))
View(df_stores_sales)
