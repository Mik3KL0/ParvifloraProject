getwd()
sys.glob("Daffodils*")
Sys.glob("Daffodils*")
Sys.glob("Daffodils*.xls")
for(f in daffodils_files){
print(paste(normalizePath(dirname(f)), fsep = .Platform$file.sep, f, sep = ""))
}
daffodils_files <- Sys.glob("Daffodils*.xls")
for(f in daffodils_files){
print(paste(normalizePath(dirname(f)), fsep = .Platform$file.sep, f, sep = ""))
}
# Dynamically setting the path
# Create a list of all paths to Daffodils files - to be used as inputs to function
daffodils_file_paths <- c()
for(f in Sys.glob("Daffodils*.xls")){
daffodils_file_paths <- c(daffodils_file_paths,
normalizePath(dirname(f)), fsep = .Platform$file.sep, f, sep = "")
}
Sys.glob("Daffodils*.xls")
daffodils_file_paths
daffodils_file_paths[1]
daffodils_file_paths[2]
normalizePath(dirname(f)), fsep = .Platform$file.sep, f, sep = ""
normalizePath(dirname(f)), fsep = .Platform$file.sep, f
normalizePath(dirname(f)), fsep = .Platform$file.sep, f
# Dynamically setting the path
# Create a list of all paths to Daffodils files - to be used as inputs to function
daffodils_file_paths <- c()
for(f in Sys.glob("Daffodils*.xls")){
daffodils_file_paths <- c(daffodils_file_paths,
paste(normalizePath(dirname(f)), fsep = .Platform$file.sep, f, sep = ""))
}
daffodils_file_paths[2]
daffodils_file_paths[1]
xlsx_cells(daffodils_file_paths[1])
library(tidyxl)
cells <- xlsx_cells(xlsx_path)
xlsx_cells(daffodils_file_paths[1])
xls <- readxl::read_excel(daffodils_file_paths[1])
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
install.packages("rio")
library(rio)
rio::export(xls, "daffodilcziec.xlsx")
rio::convert(daffodils_file_paths[1], "daffodile2.xlsx")
rio::import_list(daffodils_file_paths[1])
sh <- rio::import_list(daffodils_file_paths[1])
sh[1]
sh <- rio::import_list(daffodils_file_paths[1], , setclass = "tbl")
sh[1]
xlsx_cells(daffodils_file_paths[2])
sh[2]
View(sh)
names(sh)
export(sh, "multi.xlsx")
# import all sheets from the file as tibbles stored in a list
temp_xls <- rio::import_list(daffodils_file_paths[1], , setclass = "tbl")
# export it as .xlsx file (the sheets go into their place)
conv_file = "Daffodils" + '2020' + ".xlsx" # Change 2020 into year extracted before
export(temp_xls, conv_file)
# export it as .xlsx file (the sheets go into their place)
conv_file = "Daffodils" || '2020' || ".xlsx" # Change 2020 into year extracted before
# export it as .xlsx file (the sheets go into their place)
conv_file = "Daffodils" | '2020' | ".xlsx" # Change 2020 into year extracted before
# export it as .xlsx file (the sheets go into their place)
conv_file = paste("Daffodils",  '2020', ".xlsx") # Change 2020 into year extracted before
export(temp_xls, conv_file)
xlsx_cells(conv_file)
# Convert the Daffodil file into .xlsx format so it could be processed by tidyxl package
# import all sheets from the file as tibbles stored in a list
temp_xls <- rio::import_list(daffodils_file_paths[1], , setclass = "tbl")
# Convert the Daffodil file into .xlsx format so it could be processed by tidyxl package
# import all sheets from the file as tibbles stored in a list
temp_xls <- rio::import_list(daffodils_file_paths[1], setclass = "tbl")
# export it as .xlsx file (the sheets go into their place)
conv_file = paste("Daffodils",  '2020', ".xlsx") # Change 2020 into year extracted before
rio::export(temp_xls, conv_file)
paste("Daffodils",  '2020', ".xlsx", sep='')
'''
This function dynamically sets paths to
'''
'
This function dynamically sets paths to
'
get_file_paths <- function(pattern = "Daffodils*.xls"){
'
This function dynamically creates paths to files matching given pattern.
Intended to use to find all Dafodils sales .xls files in the working directory
input:
pattern (str) - pattern to find (default = "Daffodils*.xls")
returns:
vector of absolute file paths
'
# Dynamically setting the path
# Create a list of all paths to Daffodils files
daffodils_file_paths <- c()
for(f in Sys.glob(pattern)){
daffodils_file_paths <- c(daffodils_file_paths,
paste(normalizePath(dirname(f)), fsep = .Platform$file.sep, f, sep = ""))
}
return(daffodils_file_paths)
}
paths <- get_file_paths()
paths[1]
regexpr(".xls", paths[1], fixed = TRUE) - 4
stringr::word(paths[1], end='.xls', sep='')
stringr::word(paths[1], -8, sep='')
substring(paths[1], regexpr(".xls", paths[1]))
substring(paths[1], regexpr(".xls", paths[1]) - 4)
substring(paths[1], regexpr(".xls", paths[1]) - 4, -4)
substring(paths[1], regexpr(".xls", paths[1]) - 4, 4)
substring(paths[1], regexpr(".xls", paths[1]) - 4)
substring(paths[1], regexpr(".xls", paths[1]) - 4, length(paths[1]) - 4)
substring(paths[1], regexpr(".xls", paths[1]) - 4, length(paths[1]) - 3)
length(paths[1])
length(paths[1][1])
class(paths[1])
sub('.*Daffodils')
str_match(paths[1], "Daffodils\\s*(.*?)\\s*.xls")
stringr::str_match(paths[1], "Daffodils\\s*(.*?)\\s*.xls")
stringr::str_match(paths[1], "Daffodils\\s*(.*?)\\s*.xls")[,2]
convert_to_xlsx <- function(xls_path) {
'
Function converts the Daffodil file into .xlsx format so it could be processed by tidyxl package
input:
xls_path (str) - path to the xls file we want to convert
returns:
conv_file (str) - name of the converted .xlsx file
'
# import all sheets from the file as tibbles stored in a list
temp_xls <- rio::import_list(xls_path, setclass = "tbl")
yr <- stringr::str_match(xls_path, "Daffodils\\s*(.*?)\\s*.xls")[,2]
# export it as .xlsx file (the sheets go into their place)
conv_file = paste("Daffodils",  yr, ".xlsx", sep='') # Change 2020 into year extracted before
rio::export(temp_xls, conv_file)
return(conv_file)
}
conv_file <- convert_to_xlsx(paths[1])
