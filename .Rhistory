View(df_final)
Sys.setlocale("LC_CTYPE", "Polish")
library(tidyverse)
library(readxl)
getwd()
#^to check your repository
files = list.files(path = getwd())
### SUMMARY OF SALES ####
# TODO do sprawdzenia i zdefiniowania nazw kolumn i typów danych:
# c("STORE #" = "store_number")
# Kolumny nazwane ale nie da się tego zrobić jak powyżej - trzeba z góry nadać nazwy
# TODO jeśli okaże się że może się zmieniać kolejność kolumn
# to trzeba dodać funkcję która sprawdzi czy kolejność po wczytaniu jest odpowiednia
# string matching itp. ... i dopiero później zmienić kolumny
# expected columns order and names
# for now used in the read step
# may change to use it in assert(columns == columns_in_file), after some pattern matching
columns <- c("store_name", "store_number", "count_Azalea", "rev_Azalea",
"count_Begonia", "rev_Begonia", "count_Carnation", "rev_Carnation",
"count_Daffodil", "rev_Daffodil", "count_total", "rev_total")
add_month_year <- function(file_name, df){
'
Function which extracts month and year from file name (the only place where we have this info)
Extracts Store ID information from store_number column (last 3 digits of long numbers)
It adds this information as columns to identify the data and be able to join it with other data
The function also splits data into used part (totals) and part which is not of primary focus for us (rest)
THINK - The last step could be moved to separate function
inputs:
-> file_name (string) - relative path to processed file
-> df (data.frame) - data.frame obtained by reading in the file
output:
<- ls_df (list) - the list of 2 data.frames: totals (used data) and rest (GROSS / RETAIL etc.)
'
month_year <- stringr::str_match(file_name, "Sales\\s*(.*?)\\s*.csv")[,2]
month_year <- strsplit(month_year, split=' ')[[1]]
mnth <- match(month_year[1], month.name)
yr <- as.numeric(month_year[2])
df <- df %>% mutate(month_id = mnth, year_id = yr)
# Data.frame z GROSS / RETAIL / OTHER
# maybe we will use it later
df_scam <- df %>% filter(!str_length(as.character(store_number)) == 10)
print(nrow(df_scam))
# Filter tych które potrzebujemy do JOINa (totale)
df <- df %>% filter(str_length(as.character(store_number)) == 10) %>%
mutate(store_id = as.numeric(substr(as.character(store_number),8, 10)))
# Unfortunately R doesn't support returning multiple objects - workaround is list
ls_df = list("totals" = df, "rest" = df_scam)
return(ls_df)
}
# lista plików Summary
files_list <- list.files(pattern="^Summary.*csv$")
# initialize lists of data.frames and a pointer
sales_dflist <- list()
discarded_dflist<- list() # this one has GROSS / RETAIL / OTHER data which we are not interested in now
i <- 1
for (file in files_list){
# read data.frame with monthly data
df_mth <- read_delim(file, delim = ",", col_names = columns)
print(paste("wczytano plik", file))
# Add information about month year and extracted store ID (this is necessary for later join)
ls_trans_df <- add_month_year(file, df_mth)
# append this data.frame as element of the list which will be binded later
sales_dflist[[i]] <- ls_trans_df$totals
discarded_dflist[[i]] <- ls_trans_df$rest
# increase the pointer
i <- i + 1
}
# make a UNION - bind list of data.frames together
df_sales <- dplyr::bind_rows(sales_dflist)
df_rest <- dplyr::bind_rows(discarded_dflist)
# Join with stores
### Read in STORES ####
stores <- readxl::read_excel("Stores.xlsx")
# Left join to Stores - all stores will be present at this stage!
# Even those with all NULLs are present - meaning no sales of other flowers in these stores
# (i.e. later join Daffodil data so we NEED them)
df_stores_sales <- stores %>% left_join(select(df_sales, -"store_name"),
by = c("Store ID" = "store_id"))
### DAFFODILS ####
Daffodils <- list.files(pattern="xls$")
Daffodils2020 <- map_df(f, read_excel)
View(df_stores_sales)
View(df_final)
df_stores_sales_missing <- df_stores_sales %>%
which(is.na())
df_stores_sales_missing <- df_stores_sales %>%
which(is.na(df_stores_sales))
df_stores_sales_missing <- df_stores_sales %>%
which(is.na(df_stores_sales$store_number))
which(is.na(df_stores_sales$store_number))
which(is.na(df_stores_sales)
which(is.na(df_stores_sales)
which(is.na(df_stores_sales)
which(is.na(df_stores_sales)
which(is.na(df_stores_sales$store_number)
which(is.na(df_stores_sales$store_number)
which(is.na(df_stores_sales$store_number)
which(is.na(df_stores_sales$store_number)
which(is.na(df_stores_sales$store_number)
which(is.na(df_stores_sales$store_number))
which(is.na(df_stores_sales$store_number))
which(is.na(df_stores_sales$store_number))
if (df_stores_sales$store_number == is.na) {
show?
}
show?
show(df_stores_sales)
if (df_stores_sales$store_number == is.na) {
show(df_stores_sales)
}
number <- df_stores_sales$store_number
if (is.na(number)) {
show(df_stores_sales$`Store Name`)
}
